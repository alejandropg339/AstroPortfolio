---
import Logo from '../assets/Logo.astro';
import US from '../assets/US.astro';
import MXN from '../assets/MXN.astro';

import { useTranslations } from '../../i18n/utils';

const { currentLocale } = Astro;

const t = useTranslations(currentLocale ?? 'en');

const navItems = [
  {
    title: t('nav.home'),
    label: 'home',
    url: '#home',
  },
  {
    title: t('nav.about'),
    label: 'about',
    url: '#about',
  },
  {
    title: t('nav.skills'),
    label: 'skills',
    url: '#skills',
  },
  {
    title: t('nav.experience'),
    label: 'experience',
    url: '#experience',
  },
  {
    title: t('nav.projects'),
    label: 'projects',
    url: '#projects',
  },
  {
    title: t('nav.contact'),
    label: 'contact',
    url: '#contact',
  },
];

const locales = [
  {
    label: 'EN',
    compnonent: US,
    path: '/',
  },
  {
    label: 'ES',
    compnonent: MXN,
    path: '/es',
  },
];

const currentLang =
  locales.find(
    (locale) => locale.label === currentLocale?.toLocaleUpperCase()
  ) ?? locales[0];

const avalibleLocales = locales.filter(
  (locale) => locale.label !== currentLang.label.toLocaleUpperCase()
);
---

<header>
  <aside class="w-full hidden md:flex justify-center">
    <div
      class="fixed w-auto rounded-full backdrop-blur-[12px] backdrop-filter bg-[hsla(0,0%,100%,.01)] opacity-98 flex items-center justify-center gap-4 top-4 z-50 px-4"
    >
      <Logo class="size-12" />

      <nav class="flex flex-wrap justify-center items-center">
        {
          navItems.map(({ label, title, url }) => (
            <a
              href={url}
              aria-label={label}
              class={`px-7 py-[0.3rem] rounded-full transition-all duration-100 hover:neon-slate text-md hover:bg-radial-gradient`}
            >
              {title}
            </a>
          ))
        }

        <div class="flex items-center space-x-1 rtl:space-x-reverse">
          <span>|</span>
          <button
            type="button"
            data-dropdown-toggle="language-dropdown-menu-descktop"
            class="inline-flex items-center px-4 py-[0.3rem] rounded-full transition-all duration-100 hover:neon-slate text-md hover:bg-radial-gradient"
          >
            <currentLang.compnonent />
            {currentLang.label}
          </button>
          <!-- Dropdown -->
          <div
            class="z-50 hidden my-4 text-base list-none divide-y divide-gray-100 rounded-lg shadow bg-gray-800"
            id="language-dropdown-menu-descktop"
          >
            <ul class="py-2 font-medium" role="none">
              <li>
                {
                  avalibleLocales.map((item) => (
                    <a
                      href={item.path}
                      class="block px-4 py-2 text-sm hover:bg-[#ffffff24] "
                      role="menuitem"
                    >
                      <div class="inline-flex items-center">
                        <div class="flex">
                          <item.compnonent />
                          <span>{item.label}</span>
                        </div>
                      </div>
                    </a>
                  ))
                }
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </div>
  </aside>

  <aside class="block md:hidden">
    <nav
      class="fixed w-full z-50 backdrop-blur-[12px] backdrop-filter bg-[hsla(0,0%,100%,.01)]"
    >
      <div
        class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-2"
      >
        <a
          href="https://flowbite.com/"
          class="flex items-center space-x-3 rtl:space-x-reverse"
        >
          <Logo class="size-12" />
        </a>
        <div class="flex items-center space-x-1 rtl:space-x-reverse">
          <button
            type="button"
            data-dropdown-toggle="language-dropdown-menu"
            class="inline-flex items-center font-medium justify-center px-4 py-2 text-sm rounded-lg cursor-pointer hover:bg-gray-700"
          >
            <currentLang.compnonent />
            {currentLang.label}
          </button>
          <!-- Dropdown -->
          <div
            class="z-50 hidden my-4 text-base list-none divide-y divide-gray-100 rounded-lg shadow bg-gray-800"
            id="language-dropdown-menu"
          >
            <ul class="py-2 font-medium" role="none">
              <li>
                {
                  avalibleLocales.map((item) => (
                    <a
                      href={item.path}
                      class="block px-4 py-2 text-sm hover:bg-[#ffffff24] "
                      role="menuitem"
                    >
                      <div class="inline-flex items-center">
                        <div class="flex">
                          <item.compnonent />
                          <span>{item.label}</span>
                        </div>
                      </div>
                    </a>
                  ))
                }
              </li>
            </ul>
          </div>
          <button
            type="button"
            class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm rounded-lg focus:outline-none focus:ring-2 hover:bg-gray-700 focus:ring-gray-600"
            id="button-mobile-menu"
          >
            <svg
              class="w-5 h-5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 17 14"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M1 1h15M1 7h15M1 13h15"></path>
            </svg>
          </button>
        </div>
        <div
          class="items-center justify-betweens w-full hidden"
          id="navbar-language"
        >
          <ul
            class="flex flex-col font-medium p-4 mt-4 border rounded-lg rtl:space-x-reverse backdrop-blur-[20px] backdrop-filter bg-[hsla(0,0%,100%,.01)] border-[#ffffff24]"
          >
            {
              navItems.map(({ label, title, url }) => (
                <li>
                  <a
                    href={url}
                    aria-label={label}
                    class="block py-2 px-3 rounded"
                    data-mobile-item
                  >
                    {title}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </nav>
  </aside>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('section');
    const navItems = document.querySelectorAll('header aside div nav a');

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute('aria-label') == entry.target.id) {
              item.classList.add('neon-slate');
              item.classList.add('bg-radial-gradient');
            } else {
              item.classList.remove('neon-slate');
              item.classList.remove('bg-radial-gradient');
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });

  const mobileMenuContent = document.querySelector('#navbar-language');
  const mobileMenuButton = document.querySelector('#button-mobile-menu');
  const mobileItemsMenu = document.querySelectorAll('[data-mobile-item]');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenuContent?.classList.toggle('hidden');
  });

  mobileItemsMenu.forEach((item) => {
    item.addEventListener('click', () => {
      mobileMenuContent?.classList.add('hidden');
    });
  });
</script>
